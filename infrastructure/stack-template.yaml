AWSTemplateFormatVersion: "2010-09-09"
Description: Template for applet to be displayed in a blog
Parameters:
  AppSubDomain: # e.g. myapp.example.com
    Type: String
  AllowedOrigin: # blog subdomain e.g. myblog.blogspot.com
    Type: String
  HostedZone: # don't forget the period at the end e.g. example.com. <= note the last dot!
    Type: String
Resources:
  ###########################################################
  # AppBucket holds the static content for the app.
  # Since AWS doesn't provide a means to to use HTTPS with
  # an S3 static website, the bucket's files are accessed
  # via a CloudFront distribution.
  # CORS is configured to allow the scripts to run while
  # embedded in a blog page.
  ###########################################################

  AppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ["", ["app-", Ref: AppSubDomain]]
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - Authorize
            AllowedMethods:
              - GET
            AllowedOrigins:
              - !Join ["", ["http://", Ref: AllowedOrigin]]
              - !Join ["", ["https://", Ref: AllowedOrigin]]
            MaxAge: 3000

  ###########################################################
  # AppBucketAccessIdentity & AppBucketPolicy allow the
  # CloudFront distro to access AppBucket
  ###########################################################

  AppBucketAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Identity for app distro to access S3 bucket"
  AppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AppBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Join ["", ["arn:aws:s3:::", Ref: AppBucket, "/*"]]
            Principal:
              {
                CanonicalUser: !GetAtt AppBucketAccessIdentity.S3CanonicalUserId,
              }

  ###########################################################
  # CloudFront is a way to provide distributed, low-latency
  # access points for static content.
  # I dont' actually care about that for this application.
  # Here, it allows HTTPS access to the AppBucket files,
  # since S3 static website hosting inexplicably doesn't
  # provide a way for a secure connection.
  ###########################################################

  AppDistro:
    Type: AWS::CloudFront::Distribution
    DependsOn: AppBucket
    Properties:
      DistributionConfig:
        Aliases:
          - Ref: AppSubDomain
        DefaultCacheBehavior:
          AllowedMethods: [HEAD, GET, OPTIONS]
          TargetOriginId: AppletOrigin
          ForwardedValues:
            Headers: ["Origin"]
            QueryString: "false"
          ViewerProtocolPolicy: allow-all
        DefaultRootObject: blog-widget.html
        Enabled: True
        Origins:
          - DomainName:
              !Join ["", ["app-", Ref: AppSubDomain, ".s3.amazonaws.com"]]
            Id: AppletOrigin
            S3OriginConfig:
              OriginAccessIdentity:
                !Join [
                  "",
                  [
                    "origin-access-identity/cloudfront/",
                    Ref: AppBucketAccessIdentity,
                  ],
                ]
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: "arn:aws:acm:us-east-1:464827420904:certificate/904d9754-9f25-4b60-84e4-9472a35ab7a7"
          SslSupportMethod: "sni-only"

  ###########################################################
  # AppDistroAlias maps a friendly domain name
  # (e.g. app.example.com) onto the CloudFront distro's
  # generated name (something like fdsfdsffsd.cloudfront.net)
  ###########################################################

  AppDistroAlias:
    Type: "AWS::Route53::RecordSet"
    Properties:
      HostedZoneName: !Ref HostedZone
      Name: !Ref AppSubDomain
      Type: A
      AliasTarget:
        DNSName: !GetAtt AppDistro.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone id

  ###########################################################
  # DataBucket holds the application's data.
  # GetDataObject is a lambda function that reads from it
  # DataReadRole gives the lambda permissions needed to do
  # that.
  # Similarly for PutDataObject and DataWriteRole
  ###########################################################

  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ["", ["data-", Ref: AppSubDomain]]
  GetDataObject:
    Type: "AWS::Lambda::Function"
    Properties:
      Environment:
        Variables:
          BucketName: !Ref DataBucket
      Handler: index.readFile
      Runtime: python3.6
      Code:
        S3Bucket: !Join ["", ["deploy-", Ref: AppSubDomain]]
        S3Key: "index.zip"
      Role: !GetAtt DataReadRole.Arn
  DataReadRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: s3read
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Join ["", ["arn:aws:s3:::", !Ref DataBucket, "/*"]]

  PutDataObject:
    Type: "AWS::Lambda::Function"
    Properties:
      Environment:
        Variables:
          BucketName: !Ref DataBucket
      Handler: index.writeFile
      Runtime: python3.6
      Code:
        S3Bucket: !Join ["", ["deploy-", Ref: AppSubDomain]]
        S3Key: "index.zip"
      Role: !GetAtt DataWriteRole.Arn
  DataWriteRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: s3write
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Join ["", ["arn:aws:s3:::", !Ref DataBucket, "/*"]]

  ###########################################################
  # AppApi defines the REST API the app uses to access data.
  # GetDataMethod is the root GET method
  # PostDataMethod is the root POST method
  # Lambda permission allows the method to call the lambda.
  # RestApiCorsMethod is needed (I think) to call the API from another
  # domain in the browser.
  ###########################################################

  AppApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "SolarChartApi"
  GetDataMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST" # must be POST http://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html
        Uri:
          !Join [
            "",
            [
              "arn:aws:apigateway:",
              !Ref "AWS::Region",
              ":lambda:path/2015-03-31/functions/",
              !GetAtt GetDataObject.Arn,
              "/invocations",
            ],
          ]
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestParameters:
          "integration.request.querystring.key": "method.request.querystring.key"
        RequestTemplates:
          application/json: |
            {
              "key": "$input.params('key')"
            }
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      RequestParameters:
        method.request.querystring.key: false
      ResourceId: !GetAtt AppApi.RootResourceId
      RestApiId: !Ref AppApi
  LambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt GetDataObject.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        !Join [
          "",
          [
            "arn:aws:execute-api:",
            !Ref "AWS::Region",
            ":",
            !Ref "AWS::AccountId",
            ":",
            !Ref "AppApi",
            "/*",
          ],
        ]

  PostDataMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "CUSTOM"
      AuthorizerId: !Ref Authorizer
      HttpMethod: "POST"
      Integration:
        Type: "AWS"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        IntegrationHttpMethod: "POST" # must be POST http://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html
        Uri:
          !Join [
            "",
            [
              "arn:aws:apigateway:",
              !Ref "AWS::Region",
              ":lambda:path/2015-03-31/functions/",
              !GetAtt PutDataObject.Arn,
              "/invocations",
            ],
          ]
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      ResourceId: !GetAtt AppApi.RootResourceId
      RestApiId: !Ref AppApi
  PostLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt PutDataObject.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        !Join [
          "",
          [
            "arn:aws:execute-api:",
            !Ref "AWS::Region",
            ":",
            !Ref "AWS::AccountId",
            ":",
            !Ref "AppApi",
            "/*",
          ],
        ]

  RestApiCORSOptionMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ResourceId: !GetAtt AppApi.RootResourceId
      RestApiId: !Ref AppApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
            StatusCode: "200"
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"

  #############################################################################
  # This section defines all the parts for the Authentication API
  #############################################################################

  AuthenticateFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Environment:
        Variables:
          privateBucket: !Join ["", ["private-", Ref: AppSubDomain]]
      Handler: index.authenticate
      Runtime: python3.6
      Code:
        S3Bucket: !Join ["", ["deploy-", Ref: AppSubDomain]]
        S3Key: "index.zip"
      Role: !GetAtt AuthExecutionRole.Arn
  AuthenticationApi:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt AppApi.RootResourceId
      RestApiId: !Ref AppApi
      PathPart: "authenticate"
  AuthenticateMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri:
          !Join [
            "",
            [
              "arn:aws:apigateway:",
              !Ref "AWS::Region",
              ":lambda:path/2015-03-31/functions/",
              !GetAtt AuthenticateFunction.Arn,
              "/invocations",
            ],
          ]
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
            StatusCode: "200"
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
      ResourceId: !Ref AuthenticationApi
      RestApiId: !Ref AppApi
  AuthenticateLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt AuthenticateFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        !Join [
          "",
          [
            "arn:aws:execute-api:",
            !Ref "AWS::Region",
            ":",
            !Ref "AWS::AccountId",
            ":",
            !Ref "AppApi",
            "/*",
          ],
        ]

  AuthExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns: ["arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"]
      Policies:
        - PolicyName: readFromPrivateBucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:getObject
                Resource:
                  !Join ["", ["arn:aws:s3:::private-", !Ref AppSubDomain, "/*"]]

  AuthApiCORSOptionMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ResourceId: !Ref AuthenticationApi
      RestApiId: !Ref AppApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
            StatusCode: "200"
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"

  #############################################################################
  #
  # This section defines the Authorizer for the API.
  # The Authorizer determines what APIs the user has access to.
  #
  #############################################################################

  Authorizer:
    Type: "AWS::ApiGateway::Authorizer"
    Properties:
      AuthorizerUri:
        !Join [
          "",
          [
            "arn:aws:apigateway:",
            !Ref "AWS::Region",
            ":",
            "lambda:path/2015-03-31/functions/",
            !GetAtt AuthorizerFunction.Arn,
            "/invocations",
          ],
        ]
      RestApiId: !Ref AppApi
      Type: "TOKEN"
      IdentitySource: "method.request.header.Authorization"
      Name: "ApiAuthorizer"
  AuthorizerPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt AuthorizerFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        !Join [
          "",
          [
            "arn:aws:execute-api:",
            !Ref "AWS::Region",
            ":",
            !Ref "AWS::AccountId",
            ":",
            !Ref "AppApi",
            "/*",
          ],
        ]
  AuthorizerFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.authorizer
      Runtime: python3.6
      Environment:
        Variables:
          ResourceArn:
            !Join [
              "",
              [
                "arn:aws:execute-api:",
                !Ref "AWS::Region",
                ":",
                !Ref "AWS::AccountId",
                ":",
                !Ref "AppApi",
                "/Dev/*/*",
              ],
            ]
          privateBucket: !Join ["", ["private-", Ref: AppSubDomain]]
      Code:
        S3Bucket: !Join ["", ["deploy-", Ref: AppSubDomain]]
        S3Key: "index.zip"
      Role: !GetAtt AuthExecutionRole.Arn

  ###########################################################
  # ApiDeployment and ApiStage turn the API from definition
  # to callable API.
  ###########################################################

  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn: "GetDataMethod"
    Properties:
      RestApiId: !Ref AppApi
      StageName: "DummyStage"
  ApiStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref AppApi
      StageName: "Dev"

  ###########################################################
  # ApiDomainName, ApiMapping & ApiAlias map a friendly
  # domain name (e.g. api.example.com) onto the REST API
  ###########################################################

  ApiDomainName:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      DomainName: !Join ["", ["api-", !Ref AppSubDomain]]
      CertificateArn: "arn:aws:acm:us-east-1:464827420904:certificate/904d9754-9f25-4b60-84e4-9472a35ab7a7"

  ApiMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Properties:
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref AppApi
      Stage: "Dev"

  ApiAlias:
    Type: "AWS::Route53::RecordSet"
    DependsOn: [ApiDeployment, ApiStage]
    Properties:
      HostedZoneName: !Ref HostedZone
      Name: !Join ["", ["api-", !Ref AppSubDomain]]
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiDomainName.DistributionDomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone id

