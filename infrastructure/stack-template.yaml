AWSTemplateFormatVersion: "2010-09-09"
Description: Template for applet to be displayed in a blog
Parameters:
  SourceUrl:
    Type: String  
  AllowedOrigin:
    Type: String  
  HostedZone:    # don't forget the period at the end
    Type: String
Resources:
  SourceBucket:
    Type: AWS::S3::Bucket
    DependsOn: BucketNotificationPermissions
    Properties: 
      BucketName: 
        Ref: SourceUrl
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - Authorize
            AllowedMethods:
              - GET
            AllowedOrigins:
              - !Join ["",["http://", Ref: AllowedOrigin]]
              - !Join ["",["https://", Ref: AllowedOrigin]]
            MaxAge:  3000
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt DistroInvalidate.Arn          
  BucketAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig: 
        Comment: "Identity for distro to access S3 bucket"
  SourceBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SourceBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: 
              - s3:GetObject
            Resource: !Join ["",["arn:aws:s3:::", Ref: SourceBucket, "/*"]]
            Principal: {CanonicalUser: !GetAtt BucketAccessIdentity.S3CanonicalUserId}
  Distro:
    Type: AWS::CloudFront::Distribution
    DependsOn: SourceBucket
    Properties:
      DistributionConfig: 
        Aliases:
          - Ref: SourceUrl
        DefaultCacheBehavior:
          AllowedMethods: [HEAD, GET, OPTIONS]
          TargetOriginId: AppletOrigin
          ForwardedValues:
            Headers: ['Origin']
            QueryString: 'false'
          ViewerProtocolPolicy: allow-all
        DefaultRootObject: blog-widget.html
        Enabled: True
        Origins:
          - DomainName: !Join ["", [Ref: SourceUrl, ".s3.amazonaws.com"]]
            Id: AppletOrigin
            S3OriginConfig:
              OriginAccessIdentity: !Join ["",["origin-access-identity/cloudfront/", Ref: BucketAccessIdentity]]
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: 'arn:aws:acm:us-east-1:464827420904:certificate/904d9754-9f25-4b60-84e4-9472a35ab7a7'
          SslSupportMethod: 'sni-only'
  DistroInvalidateRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "allow_createinvalidation"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: "cloudfront:CreateInvalidation"
                Resource: "*"
              - Effect: "Allow"
                Action: "cloudfront:ListDistributions"
                Resource: "*"
  DistroInvalidate: 
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          SourceUrl: !Ref SourceUrl
      Code:
        ZipFile: |
          import boto3
          import time
          import os
          def handler(event, context):
              client = boto3.client('cloudfront')
              distros = client.list_distributions()['DistributionList']['Items']
              distroId = ''
              for distro in distros:
                for alias in distro['Aliases']['Items']:
                  if alias == os.environ['SourceUrl']:
                    distroId = distro['Id']
              invalidation = client.create_invalidation(DistributionId=distroId,
              InvalidationBatch = {
                  'Paths': {
                    'Quantity': 1,
                    'Items': ['/*']
                },
                'CallerReference': str(time.time())
              })
      Handler: index.handler
      Role: !GetAtt DistroInvalidateRole.Arn
      Runtime: python3.6
  BucketNotificationPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: 's3.amazonaws.com'
      FunctionName: !GetAtt DistroInvalidate.Arn
      SourceAccount: !Ref 'AWS::AccountId'
  DistroAlias:
    Type: 'AWS::Route53::RecordSet'
    Properties:  
      HostedZoneName: !Ref HostedZone
      Name: !Ref SourceUrl
      Type: A
      AliasTarget: 
        DNSName:  !GetAtt Distro.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone id
